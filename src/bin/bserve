#!/bin/bash

if [[ "$HOME/.bst.sh" ]]; then
    . "$HOME/.bst.sh"
fi

export BST_DEV_HOST_IP_ADDRESS=${BST_DEV_HOST_IP_ADDRESS:-192.168.200.76}
# export SIMS_GRABBER_HOST_IP_ADDRESS=${SIMS_GRABBER_HOST_IP_ADDRESS:-192.168.200.76}
echo "BST_DEV_HOST_IP_ADDRESS == $BST_DEV_HOST_IP_ADDRESS"
# echo "SIMS_GRABBER_HOST_IP_ADDRESS == $SIMS_GRABBER_HOST_IP_ADDRESS"


CLEAN='true'
SERVICE_LIST='pgsql dbwatch esink api api_v3 pipeline hal \
    sim-grabber sim-grabber-2 sim-grabber-2 \
    sim-echoguard-31 sim-echoguard-32 sim-echoguard-33 sim-echoguard-34 \
    sim-dynetics sim-rfagent sim-cot sim-helws'
# SERVICE_LIST='pgsql dbwatch esink api api_v3 pipeline hal \
#     sim-grabber sim-dynetics sim-rfagent sim-cot sim-helws'

if [[ $1 ]]; then
    if [[ "$1" == '-n' ]]; then
        CLEAN=''
    fi
fi

__ScriptVersion="v666"

#===  FUNCTION  ================================================================
#         NAME:  bserve
#  DESCRIPTION:  manage BST services for development
#===============================================================================
function usage ()
{
    echo "Usage :  $0 [options] [--]

    Options:
    -h|help       Display this message
    -v|version    Display script version"
    -n|no-install Skip the install stage of container startup

}    # ----------  end of function usage  ----------

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

INSTALL_STEP='true'
REMOTE_HOST=''
REMOTE_HOST_DIR='$HOME/Dev/BST/defenseos'

while getopts ":hvnr:" opt
do
  case $opt in

    h|help     )  usage; exit 0   ;;

    v|version  )  echo "$0 -- Version $__ScriptVersion"; exit 0   ;;

    n|noinstall  )  INSTALL_STEP=''   ;;

    r|remote  )  REMOTE_HOST="$OPTARG"   ;;

    d|remotedir  )  REMOTE_HOST_DIR="$OPTARG"   ;;

    * )  echo -e "\n  Option does not exist : $OPTARG\n"
          usage; exit 1   ;;

  esac    # --- end of case ---
done
shift $(($OPTIND-1))

if [[ $REMOTE_HOST ]]; then
    echo "Using REMOTE_HOST: $REMOTE_HOST, REMOTE_HOST_DIR: $REMOTE_HOST_DIR"
    # echo "ssh $REMOTE_HOST '$REMOTE_HOST_DIR; echo \$PWD; ls -l'"
    # ssh $REMOTE_HOST "cd $REMOTE_HOST_DIR; echo \$PWD; ls -l"
    ssh $REMOTE_HOST "cd $REMOTE_HOST_DIR; echo \$PWD"
    # exit 0
fi


BASE_DIR="$HOME/Dev/BST/defenseos"
cd "$BASE_DIR"
WORK_DIR="$BASE_DIR"

i3msg ()
{
    if [[ -f "/tmp/i3-ipc.sock" ]]; then
        i3-msg $@
    fi
}

shellexec ()
{
    tmpfile=$(mktemp)

    if [[ $REMOTE_HOST ]]; then
        # "ssh $REMOTE_HOST 'cd $HOME/Dev/BST/defenseos; $1'"
        echo -e "set +e\ntrap 'echo \"Dead now!\"' SIGINT SIGTERM\n\
            ssh $REMOTE_HOST 'cd $REMOTE_HOST_DIR; $1'\nzsh -i" > "$tmpfile"
    else
        echo -e "set +e\ntrap 'echo \"Dead now!\"' SIGINT SIGTERM\n$1\nzsh -i" > "$tmpfile"
    fi

    echo "shellexec: $(cat $tmpfile)"

    i3msg 'workspace " 10  Dev Services"'
    # bindsym $mod+Ctrl+1 [workspace=$ws1] kill
    konsole --hide-menubar --profile red --workdir $WORK_DIR -e "zsh $tmpfile" &
    sleep 0.5
}

shellexec_blocking ()
{
    tmpfile=$(mktemp)

    if [[ $REMOTE_HOST ]]; then
        # "ssh $REMOTE_HOST 'cd $HOME/Dev/BST/defenseos; $1'"
        echo -e "ssh $REMOTE_HOST 'cd $REMOTE_HOST_DIR; $1';\n" > "$tmpfile"
    else
        echo -e "$1;\n" > "$tmpfile"
    fi

    echo "shellexec_blocking: $(cat $tmpfile)"

    i3-msg 'workspace " 10  Dev Services"'
    # bindsym $mod+Ctrl+1 [workspace=$ws1] kill
    konsole --hide-menubar --profile red --workdir $WORK_DIR -e "zsh $tmpfile"
}

clean_services_str ()
{
    if [[ -z $@ ]]; then
        echo "echo 'No services provided to clean_services_str()!'"
        return
    fi

    clean_str='make '

    for service in $1; do
        clean_str="$clean_str realclean-${service}"
    done

    echo "$clean_str;"
}

# pgsql     #  API
# dbwatch   #  COP

i3msg 'workspace " 10  Dev Services"'

# Murder any running windows on the workspace
i3msg 'workspace " 10  Dev Services" focus parent, focus parent, focus parent, [tiling class="(?i)konsole" workspace=" 10  Dev Services"] kill'

i3msg 'focus parent'
i3msg 'split vertical'

if [[ $CLEAN ]]; then
    clean_str="sudo -E $(clean_services_str $SERVICE_LIST)"
    shellexec_blocking "$clean_str"
fi

shellexec_blocking "make -j3 images-base;"

serve='-s pgsql dbwatch'
if [[ -z $CLEAN ]]; then
    serve="-n $serve "
fi
shellexec "$clean_str ./scripts/serve $serve"

sleep 3

serve='-s pipeline hal'
if [[ -z $CLEAN ]]; then
    serve="-n $serve "
fi
shellexec "./scripts/serve $serve"

# Sims: Echoguard, RFAgent, s3reveal
# serve='-s sims/echoguard sims/rfagent'
# serve='-s sims/dynetics sims/s3reveal sims/grabber'
# serve='-s sims/dynetics sims/grabber sims/rfagent sims/cot sims/lobs sims/echoguard'
# serve='-s sims/dynetics sims/grabber sims/rfagent sims/cot sims/lobs sims/echoguard'
# serve='-s sims/dynetics sims/grabber sims/rfagent sims/cot sims/lobs sims/helws \
serve='-s sims/dynetics sims/grabber sims/rfagent sims/cot sims/lobs \
    sims/echoguard-31 sims/echoguard-32 sims/echoguard-33 sims/echoguard-34'

if [[ -d ./services/sims/helws/dc ]]; then
    serve="${serve} sims/helws"
fi

if [[ -f ./scripts/create_sim_grabber_links ]]; then
    shellexec_blocking './scripts/create_sim_grabber_links'
    # serve_sims="${serve_sims} sims/grabber-2 sims/grabber-3"
fi

if [[ -z $CLEAN ]]; then
    serve_sims="-n $serve_sims "
fi

# shellexec "export SIMS_GRABBER_HOST_IP_ADDRESS='$SIMS_GRABBER_HOST_IP_ADDRESS'; ./scripts/serve $serve"
shellexec "./scripts/serve $serve"

sleep 1
# Start the rest on the right side
i3msg 'focus parent'
i3msg 'split horizontal'

WORK_DIR="$BASE_DIR"
cd $WORK_DIR

serve='-s api api_v3'
if [[ -z $CLEAN ]]; then
    serve="-n $serve"
fi
shellexec "./scripts/serve $serve"

sleep 1

i3msg 'split vertical'

serve='-s esink'
if [[ -z $CLEAN ]]; then
    serve="-n $serve "
fi
shellexec "./scripts/serve $serve"

WORK_DIR="$BASE_DIR/cop"
cd $WORK_DIR
if [[ $CLEAN ]]; then
    # clean_str='yarn yrebuild;'
    clean_str='yarn install;'
fi

shellexec "echo 'Starting COP...'; . \$HOME/.nvm/nvm.sh; nvm use bst; $clean_str yarn start"
