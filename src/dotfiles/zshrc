
# Load the more ZSH Specific seettings first
fpath+=~/.zfunc

autoload -Uz compinit
compinit
setopt COMPLETE_ALIASES
zstyle ':completion::complete:*' gain-privileges 1

# Set vi mode
bindkey -v

bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey '^r' history-incremental-search-backward

# zle -N zle-line-init
# zle -N zle-keymap-select

# By default, there is a 0.4 second delay after you hit the <ESC> key and when
# the mode change is registered. This results in a very jarring and frustrating
# transition between modes. Let's reduce this delay to 0.1 seconds.
export KEYTIMEOUT=0.1
export VIRTUAL_ENV_PREV=""

# Turn off spelling correction
unsetopt correct
unsetopt correctall

HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
# setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
# setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
# setopt HIST_BEEP                 # Beep when accessing nonexistent history.


# # CD whitout typing cd
# AUTO_CD="true"

function source_if_exists()
{
    if [[ -f "$1" ]]
    then
        # echo "Sourcing $1"
        source "$1"
    fi
}

# Look for $HOME/.zsh_local
# That's where you put computer specific things that don't go in the repo
source_if_exists "$HOME/.zsh_local"

# if [[ -f "/usr/lib/python3.8/site-packages/virtualcandy/lib/virtualcandy.zsh" ]]; then
#     . "/usr/lib/python3.8/site-packages/virtualcandy/lib/virtualcandy.zsh"
# fi

source_if_exists "$HOME/.shell.d/common/0base.sh"
source_if_exists "$HOME/.shell.d/common/fzf.sh"
source_if_exists "$HOME/.shell.d/common/fzf.sh"
source_if_exists "$HOME/.shell.d/common/nvm.sh"
source_if_exists "$HOME/.shell.d/common/python.sh"
source_if_exists "$HOME/.shell.d/common/99-fzf_fasd.zsh"
source_if_exists "$HOME/.shell.d/zsh/99-fzf_fasd.zsh"

STARSHIP_CMD=$(command -v starship)
if [[ $STARSHIP_CMD ]]
then
    starshipt_cache="$HOME/.starship-init-zsh"
    eval "$(starship init zsh)"

    if [ /usr/bin/starship -nt "$starshipt_cache" -o ! -s "$starshipt_cache" ]; then
        starship init zsh >| "$starshipt_cache"
    fi

    source "$starshipt_cache"
    unset starshipt_cache
else
    echo "install 'starship' for a pretty prompt"
fi

# source_if_exists $HOME/.shell.d/zsh/python.zsh

export SIMS_GRABBER_HOST_IP_ADDRESS=10.6.6.6
export NeovideMultiGrid=true

SOURCABLES=(\
    ~/.local/share/zsh-autosuggestions/zsh-autosuggestions.zsh \
    ~/.local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh \
)

for sourceable in $SOURCABLES ; do
    source_if_exists "$sourceable"
done

bindkey '^ ' autosuggest-accept
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#555'
