#!/bin/bash

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
REPO_TOP=$(readlink -f "$THIS_DIR/..")
SRC_DIR="$REPO_TOP/src"
DOTF_DIR="$SRC_DIR/dotfiles"
BIN_DIR="$SRC_DIR/bin"
CUSTOM_DIR="$SRC_DIR/custom"

source "$THIS_DIR/upkg.sh"

safe_link()
{
    from=$1
    to=$2

    bname=$(dirname $to)
    mkdir -p $bname

    if [[ -f $to ]]; then
        if [[ ! -L $to ]]; then
            mv -v -f --backup=numbered $to "${to}.bak"
        fi
    elif [[ -d $to ]]; then
        if [[ ! -L $to ]]; then
            mv -v -f --backup=numbered $to "${to}.bak"
        fi
    fi

    ln -vnsf "$from" "$to"
}

# install our dotfiles by backing up existing files and linking in our own.
pr_info "Updating dotfiles."
for df in $(ls -1 "$DOTF_DIR/") ; do
    dest="$HOME/.${df}"
    safe_link "$DOTF_DIR/$df" "$dest"
done

# install our bin files by backing up existing files and linking in our own.
pr_info "Updating ~/bin files"
for df in $(ls -1 "$BIN_DIR/") ; do
    dest="$HOME/bin/${df}"
    safe_link "$BIN_DIR/$df" "$dest"
done

# Setup vimpager if it's installed
vimpagerdir="$PKGS_PKG_DIR/vimpager" 
if [[ -d $vimpagerdir ]]; then
    pr_info "installing vimpager"
    cd $vimpagerdir

    install -v -D -m 755 vimpager $HOME/bin/vimpager
    install -v -D -m 755 vimcat $HOME/bin/vimcat
    if [[ ! -f $HOME/.vimpagerrc ]]; then
        install -v -D -m 644 vimpagerrc $HOME/.vimpagerrc
    fi
    cd -
else
    pr_info "didn't find vimpager pager installation at $vimpagerdir"
fi

echo "Do the solarized dance"
soldir="$PKGS_PKG_DIR/kde-colors-solarized.git" 
if [[ -d "$soldir" ]]; then
    pr_info "installing solarized"
    cd $soldir 
    bash ./install.sh
    cd -

    cp -f "$SRC_DIR/xresources" ~/.Xresources
    xrdb -merge ~/.Xresources
fi

echo "Update i3 config"
~/.i3/genconfig.sh

# Install the Myi3 desktop file...
sudo install --verbose -D --mode=644 ${CUSTOM_DIR}/myi3.desktop /usr/share/xsessions/myi3.desktop
sudo install --verbose -D --mode=755 ${BIN_DIR}/initi3 /usr/local/bin/initi3

# # Install the 'pure' command prompt for zsh
# pr_info "Installing pure prompt..."
# if [[ -d "${THIS_DIR}/pure" ]]; then
#     cd "${THIS_DIR}/pure"
#     git pull
#     cd -
# else
#     git clone https://github.com/sindresorhus/pure "${THIS_DIR}/pure"
# fi
# mkdir -p "$HOME/.zfunctions"
# ln -nsf "${THIS_DIR}/pure/pure.zsh" "$HOME/.zfunctions/prompt_pure_setup"
# ln -nsf "${THIS_DIR}/pure/async.zsh" "$HOME/.zfunctions/async"

# pr_info "Installing powerline ZSH plugin..."
# if [[ -d "${THIS_DIR}/oh-my-zsh-powerline-theme" ]]; then
#     cd "${THIS_DIR}/oh-my-zsh-powerline-theme"
#     git pull
#     cd -
# else
#     git clone "https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme.git" "${THIS_DIR}/oh-my-zsh-powerline-theme"
# fi
# cd "${THIS_DIR}/oh-my-zsh-powerline-theme"
# ./install_in_omz.sh 
# cd -

if [[ -d "${THIS_DIR}/.zprezto" ]]; then
	pr_info "Updating Prezto..."
    cd "${THIS_DIR}/.zprezto"
    git pull && git submodule update --init --recursive
    cd -
else
    pr_info "Installing Prezto..."
    git clone --recursive https://github.com/sorin-ionescu/prezto.git "${THIS_DIR}/.zprezto"
fi
ln -nsf  "${THIS_DIR}/.zprezto" "${HOME}/.zprezto"

# Use package manager for nerd fonts
# ${THIS_DIR}/install_fonts.sh

if [[ "$(hostname)" == 'lola' ]]; then
    sudo cp -f $SRC_DIR/systemd/ephi-reverse-ssh.service /etc/systemd/system/
    sudo systemctl enable ephi-reverse-ssh
    sudo systemctl restart ephi-reverse-ssh
fi

if [[ -f '/usr/share/zsh-theme-powerlevel9k/powerlevel9k.zsh-theme' ]]; then
	echo 'Install powerline into Prezto'
	mkdir -p '~/.zprezto/modules/prompt/functions/prompt_powerlevel9k_setup'

	ln -nsf '/usr/share/zsh-theme-powerlevel9k/powerlevel9k.zsh-theme'\
	'~/.zprezto/modules/prompt/functions/prompt_powerlevel9k_setup'
fi

pr_pass "Run the command 'chsh -s /bin/zsh' to change the default shell to zsh."
